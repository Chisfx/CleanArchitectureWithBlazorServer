@using CleanArchitecture.Blazor.Application.Common.Interfaces.Identity;
@using CleanArchitecture.Blazor.Server.UI.Hubs;
@using CleanArchitecture.Blazor.Server.UI.Models;
@using Microsoft.AspNetCore.Components.Authorization;
@using Microsoft.Extensions.Localization;
@rendermode InteractiveServer
@implements IDisposable
@code {

    [CascadingParameter]
    protected Task<AuthenticationState> AuthState { get; set; } = default!;
    [Inject]
    private AuthenticationStateProvider AuthenticationStateProvider { get; set; } = default!;
    [Inject]
    public IDispatcher Dispatcher { get; set; } = null!;
    [Inject]
    public IStringLocalizer<SharedResource> L { get; set; } = null!;

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= _authenticationStateProvider_AuthenticationStateChanged;
    }

    [Inject]
    private IUsersStateContainer UsersStateContainer { get; set; } = default!;
    protected override async Task OnInitializedAsync()
    {
        AuthenticationStateProvider.AuthenticationStateChanged += _authenticationStateProvider_AuthenticationStateChanged;
        var state = await AuthState;
        if (state.User.Identity?.IsAuthenticated ?? false)
        {
            var userId = state.User.GetUserId();
            SetProfile(userId!);
        }
    }


    private void _authenticationStateProvider_AuthenticationStateChanged(Task<AuthenticationState> authenticationState)
    {
        InvokeAsync(async () =>
        {
            var state = await authenticationState;
            if (state.User.Identity?.IsAuthenticated ?? false)
            {
                var userId = state.User.GetUserId();
                SetProfile(userId!);
            }
        });
    }
    private void SetProfile(string userId)
    {
        Dispatcher.Dispatch(new FetchUserDtoAction() { UserId = userId });
    }

}
