@using CleanArchitecture.Blazor.Application.Features.Contacts.Commands.AddEdit

@inherits MudComponentBase
@inject IValidationService Validator
@inject IStringLocalizer<Contacts> L

<MudDialog>
    <DialogContent>
        <MudForm Model="@Model" @ref="@_form" Validation="@(Validator.ValidateValue(Model))">
            <MudGrid>
                @*TODO: define mudform that should be edit fields, for example:*@
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[Model.GetMemberDescription(x=>x.Name)]" @bind-Value="Model.Name" For="@(() => Model.Name)" Required="true" RequiredError="@L["name is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[Model.GetMemberDescription(x=>x.Description)]" Lines="3" For="@(() => Model.Description)" @bind-Value="Model.Description"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[Model.GetMemberDescription(x=>x.Email)]" @bind-Value="Model.Email" For="@(() => Model.Email)" Required="false" RequiredError="@L["email is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[Model.GetMemberDescription(x=>x.PhoneNumber)]" @bind-Value="Model.PhoneNumber" For="@(() => Model.PhoneNumber)" Required="false" RequiredError="@L["phone number is required!"]"></MudTextField>
                </MudItem>
                <MudItem xs="12" md="6">
                    <MudTextField Label="@L[Model.GetMemberDescription(x=>x.Country)]" @bind-Value="Model.Country" For="@(() => Model.Country)" Required="false" RequiredError="@L["country is required!"]"></MudTextField>
                </MudItem>

            </MudGrid>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">@ConstantString.Cancel</MudButton>
        <MudLoadingButton Loading="@_savingNew" OnClick="SaveAndNew">@ConstantString.SaveAndNew</MudLoadingButton>
        <MudLoadingButton Loading="@_saving" OnClick="Submit">@ConstantString.Save</MudLoadingButton>
    </DialogActions>
</MudDialog>

@code {
    private MudForm? _form;
    private bool _saving;
    private bool _savingNew;
    
    [CascadingParameter]
    IMudDialogInstance MudDialog { get; set; } = default!;
    
    [EditorRequired]
    [Parameter] 
    public AddEditContactCommand Model { get; set; } = null!;
    
    async Task Submit()
    {
        try
        {
            _saving = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(Model);
            result.Match(
                data =>
                {
                    MudDialog.Close(DialogResult.Ok(true));
                    Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                    return data;
                },
                errors =>
                {
                    Snackbar.Add(errors, Severity.Error);
                    return 0;
                }
            );

        }
        finally
        {
            _saving = false;
        }
    }
    async Task SaveAndNew()
    {
        try
        {
            _savingNew = true;
            await _form!.Validate().ConfigureAwait(false);
            if (!_form!.IsValid)
                return;
            var result = await Mediator.Send(Model);
            await result.MatchAsync(
               async data =>
               {
                    Snackbar.Add(ConstantString.SaveSuccess, Severity.Info);
                    await Task.Delay(300);
                    Model = new AddEditContactCommand();
                    return data;
                },
                errors =>
                {
                    Snackbar.Add(errors, Severity.Error);
                    return Task.FromResult(0);
                });

        }
        finally
        {
            _savingNew = false;
        }
    }
    void Cancel() => MudDialog.Cancel();
}