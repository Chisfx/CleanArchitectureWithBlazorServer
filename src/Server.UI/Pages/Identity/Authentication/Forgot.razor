@page "/pages/forgot-password"
@using CleanArchitecture.Blazor.Domain.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.ResetPassword
@using System.ComponentModel.DataAnnotations
@inherits OwningComponentBase
@inject IStringLocalizer<Forgot> L
@inject ILogger<Forgot> Logger
<PageTitle>@Title</PageTitle>

<EditForm Model="Input"  OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator/>

    <MudText Typo="Typo.h4" GutterBottom="true">@L["Forgot Password?"]</MudText>
    <MudText Typo="Typo.body1">@L["No worries! Just enter your email address below and we'll send you a link to reset your password."]</MudText>
    <StatusMessage Message="@Message" Error="true" />
    <MudTextField For="(()=>Input.Email)" Variant="Variant.Outlined" Label="@L["E-mail"]" @bind-Value="Input.Email" Required></MudTextField>
     
    <MudButton Variant="Variant.Filled"
               Color="Color.Primary"
               Size="Size.Large"
               ButtonType="ButtonType.Submit"
               FullWidth="true"
               Class="mt-3">
        <MudText>@L["Send E-mail"]</MudText>
    </MudButton>
</EditForm>

@code {
    public const string PageUrl = "/pages/forgot-password";
    public string Title = "Forgot Password";
    UserManager<ApplicationUser> UserManager;
    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    private readonly string _resetPasswordToken = string.Empty;
    private string _inputToken = string.Empty;
    private string? Message;
    private void InitializeServices()
    {
        UserManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
    }
    protected override Task OnInitializedAsync()
    {
        Title = L["Forgot Password"];
        InitializeServices();
        return base.OnInitializedAsync();
    }

    private async Task OnValidSubmitAsync()
    {
        var user = await UserManager.FindByEmailAsync(Input.Email);
        if (user is null)
        {
            Message = L["No user found with the provided email address."];
            return;
        }

        if (!await UserManager.IsEmailConfirmedAsync(user))
        {
            Message = L["Your email address has not been confirmed. Please check your inbox for a confirmation email or request a new confirmation link."];
            return;
        }

        var code = await UserManager.GeneratePasswordResetTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = Navigation.GetUriWithQueryParameters(
            Navigation.ToAbsoluteUri(ResetPassword.PageUrl).AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = user.Id, ["token"] = code });
        await Mediator.Publish(new ResetPasswordNotification(callbackUrl, user.Email!, user.UserName!));
        Logger.LogInformation("Rest password email sent to {0}.", Input.Email);
        Navigation.NavigateTo(ForgotPasswordConfirmation.PageUrl);
    }


    private sealed class InputModel
    {
        [Required] [EmailAddress] public string Email { get; set; } = "";
    }

}