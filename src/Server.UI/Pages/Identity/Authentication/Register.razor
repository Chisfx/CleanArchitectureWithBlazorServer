@page "/pages/register"
@using CleanArchitecture.Blazor.Application.Common.Interfaces.MultiTenant
@using CleanArchitecture.Blazor.Application.Features.Tenants.DTOs
@using CleanArchitecture.Blazor.Domain.Identity
@using CleanArchitecture.Blazor.Infrastructure.Constants.Role
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using CleanArchitecture.Blazor.Application.Features.Identity.Notifications.UserActivation
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@inherits OwningComponentBase
@inject IStringLocalizer<Register> L
@inject ILogger<Register> Logger
@inject ITenantService TenantsService
<PageTitle>@Title</PageTitle>

<div class="d-flex flex-column gap-y-3">
    <div class="d-flex flex-column">
        <EditForm Model="Input" OnValidSubmit="RegisterUser">
            <DataAnnotationsValidator />
            <MudText Typo="Typo.h4" GutterBottom="true">@L["Sign Up"]</MudText>
            <MudText>
                @L["Have an account?"] <MudLink Href="@Login.PageUrl">@L["Sign In"]</MudLink>
            </MudText>

            <MudStack Spacing="2">
                <MultiTenantAutocomplete For="@(() => Input.Tenant)"
                                         Variant="Variant.Outlined"
                                         T="TenantDto"
                                         Label="@L["Tenant"]"
                                         Required="true"
                                         @bind-Value="@Input.Tenant">

                </MultiTenantAutocomplete>
                <MudTextField For="@(() => Input.UserName)" @bind-Value="Input.UserName" Label="@L["User Name"]" Variant="Variant.Outlined" Required="true"></MudTextField>
                <MudTextField For="@(() => Input.Email)" @bind-Value="Input.Email" Label="@L["E-mail"]" Variant="Variant.Outlined" Required="true"></MudTextField>
                <MudTextField For="@(() => Input.Password)" @bind-Value="Input.Password" InputType="InputType.Password" Label="@L["Password"]" Variant="Variant.Outlined" Required="true"></MudTextField>
                <MudTextField For="@(() => Input.ConfirmPassword)" @bind-Value="Input.ConfirmPassword" InputType="InputType.Password" Label="@L["Confirm Password"]" Variant="Variant.Outlined" Required="true"></MudTextField>
                <TimeZoneAutocomplete T="string" For="@(() => Input.TimeZoneId)" @bind-Value="Input.TimeZoneId" Label="@L["Time Zone"]" Variant="Variant.Outlined"></TimeZoneAutocomplete>
                <LanguageAutocomplete T="string" For="@(() => Input.LanguageCode)" @bind-Value="Input.LanguageCode" Label="@L["Time Zone"]" Variant="Variant.Outlined"></LanguageAutocomplete>
                <MudCheckBox For="@(() => Input.AgreeToTerms)" @bind-Value="Input.AgreeToTerms" Label="@L["I agree to the terms and privacy"]"></MudCheckBox>
            </MudStack>

            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       ButtonType="ButtonType.Submit"
                       FullWidth="true">
                <MudText>@L["Register"]</MudText>
            </MudButton>
        </EditForm>
    </div>
</div>

@code {
    UserManager<ApplicationUser> UserManager;
    IUserStore<ApplicationUser> UserStore;
    SignInManager<ApplicationUser> SignInManager;


    public const string PageUrl = "/pages/register";
    private string Title = "Sign Up";

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }
    private string? message;


    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();
    private void InitializeServices()
    {
        UserStore = ScopedServices.GetRequiredService<IUserStore<ApplicationUser>>();
        UserManager = ScopedServices.GetRequiredService<UserManager<ApplicationUser>>();
        SignInManager = ScopedServices.GetRequiredService<SignInManager<ApplicationUser>>();
    }
    protected override void OnInitialized()
    {
        Title = L["Sign Up"];
        InitializeServices();

    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();
        user.TenantId = Input.Tenant.Id;
        user.LanguageCode = Input.LanguageCode;
        user.TimeZoneId = Input.TimeZoneId;
        await UserStore.SetUserNameAsync(user, Input.UserName, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);
        if (!result.Succeeded)
        {
            message = string.Join(" ", result.Errors.Select(error => error.Description));
            return;
        }

        result = await UserManager.AddToRoleAsync(user, RoleName.Basic);
        if (!result.Succeeded)
        {
            message = string.Join(" ", result.Errors.Select(error => error.Description));
            return;
        }

        var userId = await UserManager.GetUserIdAsync(user);
        Logger.LogInformation("New user account created. Username: {UserName}, User ID: {UserId}, Tenant ID: {TenantId}, Assigned Role: {RoleName}.",
            Input.UserName,
            userId,
            Input.Tenant.Id,
            RoleName.Basic);
        if (UserManager.Options.SignIn.RequireConfirmedEmail)
        {
            var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
            code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
            var callbackUrl = Navigation.GetUriWithQueryParameters(
                Navigation.ToAbsoluteUri(ConfirmEmail.PageUrl).AbsoluteUri,
                new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = "/" });
            await Mediator.Publish(new UserActivationNotification(callbackUrl, Input.Email, userId, Input.UserName));
            Navigation.NavigateTo(RegisterConfirmation.PageUrl);
        }
        
        await SignInManager.SignInAsync(user, true);
        Navigation.NavigateTo(ReturnUrl??"/");
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                                                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException(L["The default UI requires a user store with email support."]);
        }

        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    public sealed class InputModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 2)]
        public string UserName { get; set; } = "";

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string? ConfirmPassword { get; set; } = "";

        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms.")]
        public bool AgreeToTerms { get; set; } = true;

        [Display(Name = "Time Zone")]
        public string? TimeZoneId { get; set; } = TimeZoneInfo.Local.Id;
        [Display(Name = "Language")]
        public string? LanguageCode { get; set; } = CultureInfo.CurrentCulture.Name;
        [Required]
        [Display(Name = "Tenant")]
        public TenantDto? Tenant { get; set; }
    }

}